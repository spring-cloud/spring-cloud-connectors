apply plugin: 'base'
	
buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.5'
    }
}

ext {
    springVersion = "3.0.7.RELEASE"
    tomcatVersion = "7.0.53"

    springAmqpVersion = "1.2.1.RELEASE"
    springDataRedisVersion = "1.2.0.RELEASE"
    springDataMongoVersion = "1.4.0.RELEASE"
    
    jedisVersion = "2.4.1"

    commonDbcpVersion = "1.4"
    commonDbcp2Version = "2.0"

    mysqlDriverVersion = "5.1.29"
    mariadbDriverVersion = "1.1.3"
    postgresDriverVersion = "9.0-801.jdbc4"
    javaxMailVersion = "1.4.7"
    cglibVersion = "3.1"

    jacksonVersion = "2.3.3"

    log4jVersion = "1.2.17"

    junitVersion = "4.11"
    mockitoVersion = "1.9.5"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
    		archives packageSources
    }

    dependencies {
        testCompile("junit:junit:$junitVersion")
        testCompile("org.mockito:mockito-core:$mockitoVersion")
    }
    
	repositories {
	    mavenLocal()

	    maven { url "http://repo.spring.io/snapshot" }
	    maven { url "http://repo.spring.io/milestone" }
	    maven { url "http://repo.spring.io/libs-milestone" }
	    maven { url "http://repo.maven.apache.org/maven2" }
	}
}

configure(rootProject) {
	task schemaZip(type: Zip) {
		group = 'Distribution'
		classifier = 'schema'
		description = "Builds -${classifier} archive containing all " +
			"XSDs for deployment at static.springframework.org/schema."
	
		subprojects.each { subproject ->
			def Properties schemas = new Properties();
			def shortName = subproject.name
	
			subproject.sourceSets.main.resources.find {
				it.path.endsWith('META-INF/spring.schemas')
			}?.withInputStream { schemas.load(it) }
	
			for (def key : schemas.keySet()) {
				File xsdFile = subproject.sourceSets.main.resources.find {
					it.path.endsWith(schemas.get(key))
				}
				assert xsdFile != null
				into ("cloud") {
					from xsdFile.path
				}
			}
		}
	}
	
	artifacts {
		archives schemaZip
	}
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}